// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ProjektInzynierskiBlazor.Pages.Roles
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using ProjektInzynierskiBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\_Imports.razor"
using ProjektInzynierskiBlazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\Pages\Roles\Roles.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\Pages\Roles\Roles.razor"
using ProjektInzynierskiBlazor.Data.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\Pages\Roles\Roles.razor"
using ProjektInzynierskiBlazor.Data.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\Pages\Roles\Roles.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Roles")]
    public partial class Roles : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 168 "C:\Users\Marcin\source\repos\ProjektInzynierski\ProjektInzynierskiBlazor\Pages\Roles\Roles.razor"
       
    //Roles
    private List<IdentityRole> AllRoles = new List<IdentityRole>();
    private List<IdentityUser> AllUsers = new List<IdentityUser>();
    private List<RolesAccess> AllRolesAccesses = new List<RolesAccess>();
    private List<IdentityUserRole<string>> AllUserRoles = new List<IdentityUserRole<string>>();

    IdentityUserRole<string> IdentityUserRole = new IdentityUserRole<string>();

    public IdentityRole role { get; set; }
    public IdentityUser user { get; set; }
    public RolesAccess rolesAccess { get; set; }
    public bool AddRoleDialogOpen { get; set; }
    public bool AddUserRolesDialogOpen { get; set; }
    public bool AddAccessDialogOpen { get; set; }
    public bool EditRoleDialogOpen { get; set; }
    public bool EditUserRolesDialogOpen { get; set; }
    public bool EditAccessDialogOpen { get; set; }
    public bool DeleteRoleDialogOpen { get; set; }
    public bool DeleteUserRolesDialogOpen { get; set; }
    public bool DeleteAccessDialogOpen { get; set; }
    public string roleId { get; set; }
    public string userId { get; set; }
    public string roleAccessId { get; set; }
    public string rolesAccessString { get; set; }

    //Accesses
    protected List<string> SelectedItems = new List<string>();
    public string OutputValue { get; set; }


    //rest Roles
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        AllRoles = await Task.Run(() => rolesService.GetAllRolesAsync());
        AllUsers = await Task.Run(() => userService.GetAllUsersAsync());
        AllUserRoles = await Task.Run(() => userRolesService.GetAllIdentityUserRolesAsync());
        AllRolesAccesses = await Task.Run(() => rolesAccessService.GetAllRolesAccessesAsync());

        //Uncomment this part after add admin role to admim user
        /*var SiteRoleAccess = AllRolesAccesses.Where(x => (x.UrlAddress.ToString()).Contains("/Roles"));
        rolesAccess = SiteRoleAccess.First();
        rolesAccessString = rolesAccess.AccessString.ToString();*/

        StateHasChanged();
    }

    private async Task OnAddRoleDialogClose(bool accepted)
    {
        AddRoleDialogOpen = false;
        AllRoles = await Task.Run(() => rolesService.GetAllRolesAsync());
        StateHasChanged();
    }

    private void OpenAddRoleDialog()
    {
        AddRoleDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnEditRoleDialogClose(bool accepted)
    {
        EditRoleDialogOpen = false;
        AllRoles = await Task.Run(() => rolesService.GetAllRolesAsync());
        StateHasChanged();
    }

    private void OpenEditRoleDialog(string idToEdit)
    {
        EditRoleDialogOpen = true;
        roleId = idToEdit;
        StateHasChanged();
    }

    private async Task OnDeleteRoleDialogClose(bool accepted)
    {
        if (accepted)
        {
            role = await Task.Run(() => rolesService.GetRoleAsync(roleId));
            await rolesService.DeleteRoleAsync(role);
        }

        DeleteRoleDialogOpen = false;
        AllRoles = await Task.Run(() => rolesService.GetAllRolesAsync());
        StateHasChanged();
    }

    private void OpenDeleteRoleDialog(string idToDelete)
    {
        DeleteRoleDialogOpen = true;
        roleId = idToDelete;
        StateHasChanged();
    }

    //access
    private async Task OnAddAccessDialogClose(bool accepted)
    {
        AddAccessDialogOpen = false;
        AllRolesAccesses = await Task.Run(() => rolesAccessService.GetAllRolesAccessesAsync());
        StateHasChanged();
    }

    private void OpenAddAccessDialog()
    {
        AddAccessDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnEditAccessDialogClose(bool accepted)
    {
        EditAccessDialogOpen = false;
        AllRolesAccesses = await Task.Run(() => rolesAccessService.GetAllRolesAccessesAsync());
        StateHasChanged();
    }

    private void OpenEditAccessDialog(string idToEdit)
    {
        EditAccessDialogOpen = true;
        roleAccessId = idToEdit;
        StateHasChanged();
    }

    private async Task OnDeleteAccessDialogClose(bool accepted)
    {
        if (accepted)
        {
            rolesAccess = await Task.Run(() => rolesAccessService.GetRolesAccessAsync(roleAccessId));
            await rolesAccessService.DeleteRolesAccessAsync(rolesAccess);
        }

        DeleteAccessDialogOpen = false;
        AllRolesAccesses = await Task.Run(() => rolesAccessService.GetAllRolesAccessesAsync());
        StateHasChanged();
    }

    private void OpenDeleteAccessDialog(string idToDelete)
    {
        DeleteAccessDialogOpen = true;
        roleAccessId = idToDelete;
        StateHasChanged();
    }

    //user roles
    private async Task OnAddUserRolesDialogClose(bool accepted)
    {
        AddUserRolesDialogOpen = false;
        AllUsers = await Task.Run(() => userService.GetAllUsersAsync());
        StateHasChanged();
    }

    private void OpenAddUserRolesDialog(string idToAdd)
    {
        AddUserRolesDialogOpen = true;
        userId = idToAdd;
        StateHasChanged();
    }

    private async Task OnEditUserRolesDialogClose(bool accepted)
    {
        EditUserRolesDialogOpen = false;
        AllUsers = await Task.Run(() => userService.GetAllUsersAsync());
        StateHasChanged();
    }

    private void OpenEditUserRolesDialog(string idToEdit)
    {
        EditUserRolesDialogOpen = true;
        userId = idToEdit;
        StateHasChanged();
    }

    private async Task OnDeleteUserRolesDialogClose(bool accepted)
    {
        if (accepted)
        {
            IdentityUserRole = await Task.Run(() => userRolesService.GetUserRoleAsync(userId));
            await userRolesService.DeleteUserRoleAsync(IdentityUserRole);
        }

        DeleteUserRolesDialogOpen = false;
        AllUsers = await Task.Run(() => userService.GetAllUsersAsync());
        StateHasChanged();
    }

    private void OpenDeleteUserRolesDialog(string idToDelete)
    {
        DeleteUserRolesDialogOpen = true;
        userId = idToDelete;
        StateHasChanged();
    }

    //private void OpenSelectUserDialog()
    //{
    //    //body
    //}

    //accesses
    protected void ShowSelectedValues()
    {
        OutputValue = string.Join(", ", SelectedItems.ToArray());
        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserRolesService userRolesService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private RolesAccessService rolesAccessService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserService userService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private RolesService rolesService { get; set; }
    }
}
#pragma warning restore 1591
