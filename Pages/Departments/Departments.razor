@page "/Departments"
@using System.Linq
@using ProjektInzynierskiBlazor.Data.Entities
@using ProjektInzynierskiBlazor.Data.Services
@inject DepartmentService departmentService
@inject RolesAccessService rolesAccessService

<h3>Oddziały</h3>

@if (AllDepartments is null)
{
    <p><em>Ładowanie...!</em></p>
}
else
{
    <AuthorizeView Roles="@rolesAccessString">
        <Authorized>
            <button class="btn btn-info" @onclick="() => OpenAddDialog()">Dodaj oddział</button>

            <div>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th scope="col">Nazwa</th>
                            <th scope="col">Adres</th>
                            <th scope="col">Email</th>
                            <th scope="col">Numer telefonu</th>
                            <th scope="col">Informacje</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in AllDepartments)
                        {
                            <tr>
                                <th scope="row">@item.Name</th>
                                <th scope="row">@item.Address</th>
                                <th scope="row">@item.Email</th>
                                <th scope="row">@item.PhoneNumer</th>
                                <th scope="row">@item.Informations</th>
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm" @onclick="() => OpenEditDialog(item.Id)">Edytuj</button>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => OpenDeleteDialog(item.Id)">Usuń</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </Authorized>
        <NotAuthorized>
            <h5>Brak uprawnień do zarządzania oddziałami</h5>
        </NotAuthorized>
    </AuthorizeView>
    
    @if (AddDialogOpen)
    {
        <AddDepartment OnClose="@OnAddDialogClose"></AddDepartment>
    }

    @if (EditDialogOpen)
    {
        <EditDepartment EditObjId="@departmentId" OnClose="@OnEditDialogClose"></EditDepartment>
    }

    @if (DeleteDialogOpen)
    {
        <DeleteDepartment DeleteObjId="@departmentId" OnClose="@OnDeleteDialogClose"></DeleteDepartment>
    }
}

@code {
    private List<Department> AllDepartments = new List<Department>();
    private List<RolesAccess> AllRolesAccesses = new List<RolesAccess>();

    public Department department { get; set; }
    private RolesAccess rolesAccess { get; set; }
    public bool AddDialogOpen { get; set; }
    public bool EditDialogOpen { get; set; }
    public bool DeleteDialogOpen { get; set; }
    public string departmentId { get; set; }
    public string rolesAccessString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        AllRolesAccesses = await Task.Run(() => rolesAccessService.GetAllRolesAccessesAsync());
        AllDepartments = await Task.Run(() => departmentService.GetAllDepartmentsAsync());

        var SiteRoleAccess = AllRolesAccesses.Where(x => (x.UrlAddress.ToString()).Contains("/Departments"));
        rolesAccess = SiteRoleAccess.First();
        rolesAccessString = rolesAccess.AccessString.ToString();

        StateHasChanged();
    }

    private async Task OnAddDialogClose(bool accepted)
    {
        AddDialogOpen = false;
        AllDepartments = await Task.Run(() => departmentService.GetAllDepartmentsAsync());
        StateHasChanged();
    }

    private void OpenAddDialog()
    {
        AddDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnEditDialogClose(bool accepted)
    {
        EditDialogOpen = false;
        AllDepartments = await Task.Run(() => departmentService.GetAllDepartmentsAsync());
        StateHasChanged();
    }

    private void OpenEditDialog(string idToEdit)
    {
        EditDialogOpen = true;
        departmentId = idToEdit;
        StateHasChanged();
    }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            department = await Task.Run(() => departmentService.GetDepartmentAsync(departmentId));
            await departmentService.DeleteDepartmentAsync(department);
        }

        DeleteDialogOpen = false;
        AllDepartments = await Task.Run(() => departmentService.GetAllDepartmentsAsync());
        StateHasChanged();
    }

    private void OpenDeleteDialog(string idToDelete)
    {
        DeleteDialogOpen = true;
        departmentId = idToDelete;
        StateHasChanged();
    }
}
