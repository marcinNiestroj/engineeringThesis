@page "/"
@using System.Threading
@using System.Linq
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using ProjektInzynierskiBlazor.Pages.Home
@using ProjektInzynierskiBlazor.Data.Entities
@using ProjektInzynierskiBlazor.Data.Services
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject OfficeWorkService officeWorkService
@inject OrderService orderService
@inject DepartmentService departmentService
@inject OrdererService ordererService
@inject LocationService locationService
@inject EquipmentService equipmentService
@inject CarService carService
@inject EmployeeService employeeService
@inject UserService userService
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <h1>@_displayDate</h1>
        <hr />

        @if (identityUserName is null)
        {
            <p><em>Ładowanie...!</em></p>
        }
        else
        {
        @*Orders*@
        <div class="card-deck">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Zlecenia</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@_yesterdayDate.ToString("dddd dd MMMM yyyy")</h6>
                    <hr />
                    <p>
                        @if (UsersYesterdayOrders is not null)
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th scope="col">Godzina</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Obiekt</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in UsersYesterdayOrders)
                                    {
                                        <tr>
                                            <th scope="row">
                                                <p>@item.OrderFrom.ToString("HH:mm")</p>
                                                <p>@item.OrderTo.ToString("HH:mm")</p>
                                            </th>
                                            <th scope="row">@item.Status</th>
                                            <th scope="row">@item.Location.Shortcut</th>
                                            <td>
                                                <p><button type="button" class="btn btn-secondary btn-sm" @onclick="() => OpenOrderDetailsDialog(item.Id)">Szczegóły</button></p>
                                                <p><button type="button" class="btn btn-success btn-sm" @onclick="() => OpenEditOrderDialog(item.Id)">Raportuj</button></p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <b>Brak zleceń</b>
                        }
                    </p>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Zlecenia</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@_todayDate.ToString("dddd dd MMMM yyyy")</h6>
                    <hr />
                    <p>
                        @if (UsersTodayOrders is not null)
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th scope="col">Godzina</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Obiekt</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in UsersTodayOrders)
                                    {
                                        <tr>
                                            <th scope="row">
                                                <p>@item.OrderFrom.ToString("HH:mm")</p>
                                                <p>@item.OrderTo.ToString("HH:mm")</p>
                                            </th>
                                            <th scope="row">@item.Status</th>
                                            <th scope="row">@item.Location.Shortcut</th>
                                            <td>
                                                <p><button type="button" class="btn btn-secondary btn-sm" @onclick="() => OpenOrderDetailsDialog(item.Id)">Szczegóły</button></p>
                                                <p><button type="button" class="btn btn-success btn-sm" @onclick="() => OpenEditOrderDialog(item.Id)">Raportuj</button></p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <b>Brak zleceń</b>
                        }
                    </p>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Zlecenia</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@_tomorrowDate.ToString("dddd dd MMMM yyyy")</h6>
                    <hr />
                    <p>
                        @if (UsersTomorrowOrders is not null)
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th scope="col">Godzina</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Obiekt</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in UsersTomorrowOrders)
                                    {
                                        <tr>
                                            <th scope="row">
                                                <p>@item.OrderFrom.ToString("HH:mm")</p>
                                                <p>@item.OrderTo.ToString("HH:mm")</p>
                                            </th>
                                            <th scope="row">@item.Status</th>
                                            <th scope="row">@item.Location.Shortcut</th>
                                            <td>
                                                <p><button type="button" class="btn btn-secondary btn-sm" @onclick="() => OpenOrderDetailsDialog(item.Id)">Szczegóły</button></p>
                                                <p><button type="button" class="btn btn-success btn-sm" @onclick="() => OpenEditOrderDialog(item.Id)">Raportuj</button></p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <b>Brak zleceń</b>
                        }
                    </p>
                </div>
            </div>
        </div>
        <p></p>

        @*OfficeWorks*@
        <div class="card-deck">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Prace kameralne</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@_yesterdayDate.ToString("dddd dd MMMM yyyy")</h6>
                    <hr />
                    <p>
                        @if (UsersYesterdayOfficeWorks is not null)
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th scope="col">Godzina</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Obiekt</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in UsersYesterdayOfficeWorks)
                                    {
                                        <tr>
                                            <th scope="row">
                                                <p>@item.From.ToString("HH:mm")</p>
                                                <p>@item.To.ToString("HH:mm")</p>
                                            </th>
                                            <th scope="row">@item.Status</th>
                                            <th scope="row">@item.Order.Location.Shortcut</th>
                                            <td>
                                                <p><button type="button" class="btn btn-secondary btn-sm" @onclick="() => OpenOfficeWorkDetailsDialog(item.Id)">Szczegóły</button></p>
                                                <p><button type="button" class="btn btn-primary btn-sm" @onclick="() => OpenEditOfficeWorkDialog(item.Id)">Edytuj</button></p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <b>Brak zleceń</b>
                        }
                    </p>
                    <hr />
                    <button type="button" class="btn btn-success btn-sm" @onclick="() => OpenAddOfficeWorkDialog()">Dodaj</button>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Prace kameralne</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@_todayDate.ToString("dddd dd MMMM yyyy")</h6>
                    <hr />
                    <p>
                        @if (UsersTodayOfficeWorks is not null)
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th scope="col">Godzina</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Obiekt</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in UsersTodayOfficeWorks)
                                    {
                                        <tr>
                                            <th scope="row">
                                                <p>@item.From.ToString("HH:mm")</p>
                                                <p>@item.To.ToString("HH:mm")</p>
                                            </th>
                                            <th scope="row">@item.Status</th>
                                            <th scope="row">@item.Order.Location.Shortcut</th>
                                            <td>
                                                <p><button type="button" class="btn btn-secondary btn-sm" @onclick="() => OpenOfficeWorkDetailsDialog(item.Id)">Szczegóły</button></p>
                                                <p><button type="button" class="btn btn-primary btn-sm" @onclick="() => OpenEditOfficeWorkDialog(item.Id)">Edytuj</button></p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <b>Brak zleceń</b>
                        }
                    </p>
                    <hr />
                    <button type="button" class="btn btn-success btn-sm" @onclick="() => OpenAddOfficeWorkDialog()">Dodaj</button>
                </div>
            </div>
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Prace kameralne</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@_tomorrowDate.ToString("dddd dd MMMM yyyy")</h6>
                    <hr />
                    <p>
                        @if (UsersTomorrowOfficeWorks is not null)
                        {
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th scope="col">Godzina</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Obiekt</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in UsersTomorrowOfficeWorks)
                                    {
                                        <tr>
                                            <th scope="row">
                                                <p>@item.From.ToString("HH:mm")</p>
                                                <p>@item.To.ToString("HH:mm")</p>
                                            </th>
                                            <th scope="row">@item.Status</th>
                                            <th scope="row">@item.Order.Location.Shortcut</th>
                                            <td>
                                                <p><button type="button" class="btn btn-secondary btn-sm" @onclick="() => OpenOfficeWorkDetailsDialog(item.Id)">Szczegóły</button></p>
                                                <p><button type="button" class="btn btn-primary btn-sm" @onclick="() => OpenEditOfficeWorkDialog(item.Id)">Edytuj</button></p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <b>Brak zleceń</b>
                        }
                    <hr />
                    <button type="button" class="btn btn-success btn-sm" @onclick="() => OpenAddOfficeWorkDialog()">Dodaj</button>
                    </p>
                </div>
            </div>
        </div>
        }
    </Authorized>
    <NotAuthorized>
        <h1>@_displayDate</h1>
        <hr />

        <h5><b>Witaj!</b></h5>
        <hr />
        <p>Zaloguj się by uzyskać dostęp do zadań</p>
    </NotAuthorized>
</AuthorizeView>

@if (EditOrderDialogOpen)
{
    <HomeEditOrder EditObjId="@orderId" OnClose="@OnEditOrderDialogClose"></HomeEditOrder>
}
@if (OrderDetailsDialogOpen)
{
    <HomeOrderDetails DetailsObjId="@orderId" OnClose="OnOrderDetailsDialogClose"></HomeOrderDetails>
}

@if (AddOfficeWorkDialogOpen)
{
    <HomeAddOfficeWork OnClose="@OnAddOfficeWorkDialogClose"></HomeAddOfficeWork>
}
@if (EditOfficeWorkDialogOpen)
{
    <HomeEditOfficeWork EditObjId="@officeWorkId" OnClose="@OnEditOfficeWorkDialogClose"></HomeEditOfficeWork>
}
 @if (OfficeWorkDetailsDialogOpen)
 {
     <HomeOfficeWorkDetails DetailsObjId="@officeWorkId" OnClose="@OnOfficeWorkDetailsDialogClose"></HomeOfficeWorkDetails>
 }

@code{
    private List<OfficeWork> AllOfficeWorks = new List<OfficeWork>();
    private List<OfficeWork> UsersYesterdayOfficeWorks = new List<OfficeWork>();
    private List<OfficeWork> UsersTodayOfficeWorks = new List<OfficeWork>();
    private List<OfficeWork> UsersTomorrowOfficeWorks = new List<OfficeWork>();
    private List<Order> AllOrders = new List<Order>();
    private List<Order> UsersYesterdayOrders = new List<Order>();
    private List<Order> UsersTodayOrders = new List<Order>();
    private List<Order> UsersTomorrowOrders = new List<Order>();
    private List<Employee> AllEmployees = new List<Employee>();
    private List<IdentityUser> AllIdentityUsers = new List<IdentityUser>();
    private List<Department> AllDepartments = new List<Department>();
    private List<Orderer> AllOrderers = new List<Orderer>();
    private List<Equipment> AllEquipments = new List<Equipment>();
    private List<Car> AllCars = new List<Car>();
    private List<Location> AllLocations = new List<Location>();

    public OfficeWork officeWork { get; set; }
    public Order order { get; set; }
    public Employee employee { get; set; }
    public IdentityUser identityUser { get; set; }
    public bool AddOfficeWorkDialogOpen { get; set; }
    public bool OfficeWorkDetailsDialogOpen { get; set; }
    public bool OrderDetailsDialogOpen { get; set; }
    public bool EditOfficeWorkDialogOpen { get; set; }
    public bool EditOrderDialogOpen { get; set; }
    public string orderId { get; set; }
    public string officeWorkId { get; set; }
    public string employeeId { get; set; }
    public string identityUserName { get; set; }


    private string _displayDate;
    private DateTime _todayDate = DateTime.Today;
    private DateTime _yesterdayDate = DateTime.Today.AddDays(-1);
    private DateTime _tomorrowDate = DateTime.Today.AddDays(1);
    private Timer timer;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        //Initialize lists
        AllOrders = await Task.Run(() => orderService.GetAllOrdersAsync());
        AllOfficeWorks = await Task.Run(() => officeWorkService.GetAllOfficeWorksAsync());
        AllEmployees = await Task.Run(() => employeeService.GetAllEmployeesAsync());
        AllIdentityUsers = await Task.Run(() => userService.GetAllUsersAsync());
        AllDepartments = await Task.Run(() => departmentService.GetAllDepartmentsAsync());
        AllOrderers = await Task.Run(() => ordererService.GetAllOrderersAsync());
        AllEquipments = await Task.Run(() => equipmentService.GetAllEquipmentAsync());
        AllCars = await Task.Run(() => carService.GetAllCarsAsync());
        AllLocations = await Task.Run(() => locationService.GetAllLocationsAsync());

        //Get login employee id
        identityUserName = httpContextAccessor.HttpContext.User.Identity.Name;

        @if (identityUserName is not null)
        {
            var idUser = AllIdentityUsers.Where(x => (x.UserName).Contains(identityUserName));
            identityUser = idUser.First();
            employee = await Task.Run(() => employeeService.GetEmployeeByUserAsync(identityUser));
            employeeId = employee.Id;


            //Get orders and officeworks for login employee
            var EmployeeOrders = AllOrders.Where(x => ((x.FirstEmployee.Id).Equals(employeeId)));
            var EmployeeOfficeWorks = AllOfficeWorks.Where(x => ((x.Employee).Equals(employee)));

            //Get orders and officeworks for yesterday, today and tommorow
            var YesterdayOrders = EmployeeOrders.Where(x => (x.OrderFrom.ToString("yyyy-MM-dd")).Equals(_yesterdayDate.ToString("yyyy-MM-dd")));
            var TodayOrders = EmployeeOrders.Where(x => (x.OrderFrom.ToString("yyyy-MM-dd")).Equals(_todayDate.ToString("yyyy-MM-dd")));
            var TomorrowOrders = EmployeeOrders.Where(x => (x.OrderFrom.ToString("yyyy-MM-dd")).Equals(_tomorrowDate.ToString("yyyy-MM-dd")));
            var YesterdayOfficeWorks = EmployeeOfficeWorks.Where(x => (x.From.ToString("yyyy-MM-dd")).Equals(_yesterdayDate.ToString("yyyy-MM-dd")));
            var TodayOfficeWorks = EmployeeOfficeWorks.Where(x => (x.From.ToString("yyyy-MM-dd")).Equals(_todayDate.ToString("yyyy-MM-dd")));
            var TomorrowOfficeWorks = EmployeeOfficeWorks.Where(x => (x.From.ToString("yyyy-MM-dd")).Equals(_tomorrowDate.ToString("yyyy-MM-dd")));

            UsersYesterdayOrders = YesterdayOrders.ToList();
            UsersTodayOrders = TodayOrders.ToList();
            UsersTomorrowOrders = TomorrowOrders.ToList();
            UsersYesterdayOfficeWorks = YesterdayOfficeWorks.ToList();
            UsersTodayOfficeWorks = TodayOfficeWorks.ToList();
            UsersTomorrowOfficeWorks = TomorrowOfficeWorks.ToList();
        }

        timer = new Timer(Tick, null, 0, 1000);

        StateHasChanged();
    }

    private void Tick(object _)
    {
        _displayDate = DateTime.Now.ToString("dddd, dd MMMM yyyy HH:mm:ss");
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private async Task OnEditOrderDialogClose(bool accepted)
    {
        EditOrderDialogOpen = false;
        AllOrders = await Task.Run(() => orderService.GetAllOrdersAsync());
        StateHasChanged();
    }

    private void OpenEditOrderDialog(string idToEdit)
    {
        EditOrderDialogOpen = true;
        orderId = idToEdit;
        StateHasChanged();
    }

    private async Task OnOrderDetailsDialogClose(bool accepted)
    {
        OrderDetailsDialogOpen = false;
        AllOrders = await Task.Run(() => orderService.GetAllOrdersAsync());
        StateHasChanged();
    }

    private void OpenOrderDetailsDialog(string id)
    {
        OrderDetailsDialogOpen = true;
        orderId = id;
        StateHasChanged();
    }

    private async Task OnAddOfficeWorkDialogClose(bool accepted)
    {
        AddOfficeWorkDialogOpen = false;
        AllOfficeWorks = await Task.Run(() => officeWorkService.GetAllOfficeWorksAsync());
        StateHasChanged();
    }

    private void OpenAddOfficeWorkDialog()
    {
        AddOfficeWorkDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnEditOfficeWorkDialogClose(bool accepted)
    {
        EditOfficeWorkDialogOpen = false;
        AllOfficeWorks = await Task.Run(() => officeWorkService.GetAllOfficeWorksAsync());
        StateHasChanged();
    }

    private void OpenEditOfficeWorkDialog(string idToEdit)
    {
        EditOfficeWorkDialogOpen = true;
        officeWorkId = idToEdit;
        StateHasChanged();
    }

    private async Task OnOfficeWorkDetailsDialogClose(bool accepted)
    {
        OfficeWorkDetailsDialogOpen = false;
        AllOfficeWorks = await Task.Run(() => officeWorkService.GetAllOfficeWorksAsync());
        StateHasChanged();
    }

    private void OpenOfficeWorkDetailsDialog(string id)
    {
        OfficeWorkDetailsDialogOpen = true;
        officeWorkId = id;
        StateHasChanged();
    }
}
