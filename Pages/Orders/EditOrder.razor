@using ProjektInzynierskiBlazor.Data
@using ProjektInzynierskiBlazor.Data.Entities
@using ProjektInzynierskiBlazor.Data.Services
@inject OrderService orderService
@inject DepartmentService departmentService
@inject OrdererService ordererService
@inject LocationService locationService
@inject EquipmentService equipmentService
@inject CarService carService
@inject EmployeeService employeeService


<div class="modal fade show" id="editModal" role="dialog" tabindex="0" aria-labelledby="editModalTitle" aria-hidden="true" style="overflow:auto; display:block">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalTitle">Edytuj zlecenie</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@ModalCancel">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th scope="col">Termin zlecenia</th>
                                            <th scope="col">Czas wykonania</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <th scope="row">
                                                <p>
                                            <th scope="row"><label for="OrderFrom" class="control-label">Od</label></th>
                                            <th scope="row"><input form="OrderTo" class="form-control" type="datetime" format-value="{0:yyyy-MM-dd HH:mm}" @bind="@order.OrderFrom" /></th>
                                            </p>
                                            <p>
                                            <th scope="row"><label for="OrderTo" class="control-label">Do</label></th>
                                            <th scope="row"><input form="OrderTo" class="form-control" type="datetime" format-value="{0:yyyy-MM-dd HH:mm}" @bind="@order.OrderTo" /></th>
                                            </p>
                                            </th>
                                            <th scope="row">
                                                <p>
                                            <th scope="row"><label for="DoneFrom" class="control-label">Od</label></th>
                                            <th scope="row"><input form="DoneFrom" class="form-control" type="datetime" format-value="{0:yyyy-MM-dd HH:mm}" @bind="@order.DoneFrom" /></th>
                                            </p>
                                            <p>
                                            <th scope="row"><label for="DoneTo" class="control-label">Do</label></th>
                                            <th scope="row"><input form="DoneTo" class="form-control" type="datetime" format-value="{0:yyyy-MM-dd HH:mm}" @bind="@order.DoneTo" /></th>
                                            </p>
                                            </th>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="form-group">
                                <th scope="col">Określ status zlecenia</th>
                                <div class="form-control-wrapper">
                                    <select class="form-control=label" @bind="@order.Status">
                                        <option value="">@order.Status.ToString()</option>
                                        @foreach (var item in Enum.GetValues(typeof(Statuses)))
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <th scope="col">Wybierz obiekt</th>
                                <div class="form-control-wrapper">
                                    <select class="form-control=label" @onchange="LocationChangeHandler">
                                        <option value="@_location.Id">@_location.Name</option>
                                        @foreach (var item in AllLocations)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <th scope="col">Wybierz zleceniodawcę</th>
                                <div class="form-control-wrapper">
                                    <select class="form-control=label" @onchange="OrdererChangeHandler">
                                        <option value="">-Brak-</option>
                                        @foreach (var item in AllOrderers)
                                        {
                                            <option value="@item.Id">@item.Name , @item.Company</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <th scope="col">Treść zlecenia</th>
                                <input form="WhatToDo" class="form-control" size="50" @bind="@order.WhatToDo" />
                            </div>
                            <div class="form-group">
                                <th scope="col">Informacje</th>
                                <input form="Informations" class="form-control" size="50" @bind="@order.Informations" />
                            </div>
                            <div class="form-group">
                                <th scope="col">Wybierz oddział</th>
                                <div class="form-control-wrapper">
                                    <select class="form-control-label" @onchange="DepartmentChangeHandler">
                                        <option value="">-Brak-</option>
                                        @foreach (var item in AllDepartments)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th scope="col">Wybierz pracowników</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <th scope="row">
                                                <p>
                                            <th scope="row"><label for="FirstEmployee" class="control-label">Wybierz pierwszego pracownika</label></th>
                                            <th scope="row">
                                                <div class="form-control-wrapper">
                                                    <select class="form-control-label" @onchange="FirstEmployeeChangeHandler">
                                                        <option value="">-Brak-</option>
                                                        @foreach (var item in AllEmployees)
                                                        {
                                                            <option value="@item.Id">@item.FirstName @item.LastName</option>
                                                        }
                                                    </select>
                                                </div>
                                            </th>
                                            </p>
                                            </th>
                                            <th scope="row">
                                                <p>
                                            <th scope="row"><label for="SecondEmployee" class="control-label">Wybierz drugiego pracownika</label></th>
                                            <th scope="row">
                                                <div class="form-control-wrapper">
                                                    <select class="form-control-label" @onchange="SecondEmployeeChangeHandler">
                                                        <option value="">-Brak-</option>
                                                        @foreach (var item in AllEmployees)
                                                        {
                                                            <option value="@item.Id">@item.FirstName @item.LastName</option>
                                                        }
                                                    </select>
                                                </div>
                                            </th>
                                            </p>
                                            </th>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="form-group">
                                <th scope="col">Wybierz pojazd</th>
                                <div class="form-control-wrapper">
                                    <select class="form-control=label" @onchange="CarChangeHandler">
                                        <option value="">-Brak-</option>
                                        @foreach (var item in AllCars)
                                        {
                                            <option value="@item.Id">@item.Name , @item.RegistrationNumber</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <th scope="col">Wybierz wyposażenie</th>
                                <div class="form-control-wrapper">
                                    <select class="form-control=label" @onchange="FirstEquipmentChangeHandler">
                                        <option value="">-Brak-</option>
                                        @foreach (var item in AllEquipments)
                                        {
                                            <option value="@item.Id">@item.Number , @item.Elements</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <th scope="col">Wybierz wyposażenie dodatkowe</th>
                                <div class="form-control-wrapper">
                                    <select class="form-control=label" @onchange="SecondEquipmentChangeHandler">
                                        <option value="">-Brak-</option>
                                        @foreach (var item in AllEquipments)
                                        {
                                            <option value="@item.Id">@item.Number , @item.Elements</option>
                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <input type="button" class="btn btn-success" @onclick="@UpdateOrder" value="Zapisz" />
                                        <input type="button" class="btn btn-primary" @onclick="@ModalCancel" value="Anuluj" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string EditObjId { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private List<Order> AllOrders = new List<Order>();
    private List<Department> AllDepartments = new List<Department>();
    private List<Orderer> AllOrderers = new List<Orderer>();
    private List<Location> AllLocations = new List<Location>();
    private List<Equipment> AllEquipments = new List<Equipment>();
    private List<Car> AllCars = new List<Car>();
    private List<Employee> AllEmployees = new List<Employee>();

    Order order = new Order();
    Department _department = new Department();
    Orderer _orderer = new Orderer();
    Location _location = new Location();
    Equipment _firstEquipment = new Equipment();
    Equipment _secondEquipment = new Equipment();
    Car _car = new Car();
    Employee _firstEmployee = new Employee();
    Employee _secondEmployee = new Employee();

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    protected async void UpdateOrder()
    {
        await orderService.UpdateOrderAsync(order);
        await ModalCancel();
    }

    protected override async Task OnInitializedAsync()
    {
        order = await Task.Run(() => orderService.GetOrderAsync(EditObjId));
        AllDepartments = await Task.Run(() => departmentService.GetAllDepartmentsAsync());
        AllOrderers = await Task.Run(() => ordererService.GetAllOrderersAsync());
        AllLocations = await Task.Run(() => locationService.GetAllLocationsAsync());
        AllEquipments = await Task.Run(() => equipmentService.GetAllEquipmentAsync());
        AllCars = await Task.Run(() => carService.GetAllCarsAsync());
        AllEmployees = await Task.Run(() => employeeService.GetAllEmployeesAsync());

        _department = order.Department;
        _orderer = order.Orderer;
        _location = order.Location;
        _firstEquipment = order.FirstEquipment;
        _secondEquipment = order.SecondEquipment;
        _car = order.Car;
        _firstEmployee = order.FirstEmployee;
        _secondEmployee = order.SecondEmployee;
    }

    private async Task LocationChangeHandler(ChangeEventArgs args)
    {
        _location = await Task.Run(() => locationService.GetLocationAsync(args.Value.ToString()));
        order.Location = _location;
        StateHasChanged();
    }

    private async Task OrdererChangeHandler(ChangeEventArgs args)
    {
        _orderer = await Task.Run(() => ordererService.GetOrdererAsync(args.Value.ToString()));
        order.Orderer = _orderer;
        StateHasChanged();
    }

    private async Task DepartmentChangeHandler(ChangeEventArgs args)
    {
        _department = await Task.Run(() => departmentService.GetDepartmentAsync(args.Value.ToString()));
        order.Department = _department;
        StateHasChanged();
    }

    private async Task FirstEmployeeChangeHandler(ChangeEventArgs args)
    {
        _firstEmployee = await Task.Run(() => employeeService.GetEmployeeAsync(args.Value.ToString()));
        order.FirstEmployee = _firstEmployee;
        StateHasChanged();
    }

    private async Task SecondEmployeeChangeHandler(ChangeEventArgs args)
    {
        _secondEmployee = await Task.Run(() => employeeService.GetEmployeeAsync(args.Value.ToString()));
        order.SecondEmployee = _secondEmployee;
        StateHasChanged();
    }

    private async Task CarChangeHandler(ChangeEventArgs args)
    {
        _car = await Task.Run(() => carService.GetCarAsync(args.Value.ToString()));
        order.Car = _car;
        StateHasChanged();
    }

    private async Task FirstEquipmentChangeHandler(ChangeEventArgs args)
    {
        _firstEquipment = await Task.Run(() => equipmentService.GetEquipmentAsync(args.Value.ToString()));
        order.FirstEquipment = _firstEquipment;
        StateHasChanged();
    }

    private async Task SecondEquipmentChangeHandler(ChangeEventArgs args)
    {
        _secondEquipment = await Task.Run(() => equipmentService.GetEquipmentAsync(args.Value.ToString()));
        order.SecondEquipment = _secondEquipment;
        StateHasChanged();
    }
}
